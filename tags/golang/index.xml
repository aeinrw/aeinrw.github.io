<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on aeinrw</title>
    <link>https://blog.aeinrw.com/tags/golang/</link>
    <description>Recent content in golang on aeinrw</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>aeinrw@gmail.com (aeinrw)</managingEditor>
    <webMaster>aeinrw@gmail.com (aeinrw)</webMaster>
    <lastBuildDate>Tue, 22 Sep 2020 20:01:52 +0800</lastBuildDate><atom:link href="https://blog.aeinrw.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>记个人的第一个完整项目</title>
      <link>https://blog.aeinrw.com/posts/%E8%AE%B0%E4%B8%AA%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Tue, 22 Sep 2020 20:01:52 +0800</pubDate>
      <author>aeinrw@gmail.com (aeinrw)</author>
      <guid>https://blog.aeinrw.com/posts/%E8%AE%B0%E4%B8%AA%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;h1 id=&#34;前后端分离的个人课程表&#34;&gt;前后端分离的个人课程表&lt;/h1&gt;
&lt;p&gt;鉴于目前ios上没有让自己满意的课程表应用, 另外在看到&lt;a href=&#34;https://sspai.com/u/spencerwoo/updates&#34;&gt;@spencerwooo&lt;/a&gt;的&lt;a href=&#34;https://gist.github.com/spencerwooo/7955aefc4ffa5bc8ae7c83d85d05e7a4&#34;&gt;个人粉丝记录&lt;/a&gt;后产生想法. 前后用时一天, 从后端服务器发出json的API, 到ios上基于scriptable的小组件, 也算是自己的第一个前后端分离的完整项目.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang的汇编以及栈帧</title>
      <link>https://blog.aeinrw.com/posts/golang%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A5%E5%8F%8A%E6%A0%88%E5%B8%A7/</link>
      <pubDate>Tue, 21 Jul 2020 15:24:16 +0800</pubDate>
      <author>aeinrw@gmail.com (aeinrw)</author>
      <guid>https://blog.aeinrw.com/posts/golang%E7%9A%84%E6%B1%87%E7%BC%96%E4%BB%A5%E5%8F%8A%E6%A0%88%E5%B8%A7/</guid>
      <description>&lt;h1 id=&#34;golang的汇编&#34;&gt;golang的汇编&lt;/h1&gt;
&lt;p&gt;在go语言中, 函数的参数和返回值都是通过栈来传递的, 函数调用时会有自己的&lt;strong&gt;栈帧&lt;/strong&gt;, 并引入了几个寄存器来定位栈帧的大小和值的调用.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang的接口类型</title>
      <link>https://blog.aeinrw.com/posts/golang%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 24 Jun 2020 20:29:15 +0800</pubDate>
      <author>aeinrw@gmail.com (aeinrw)</author>
      <guid>https://blog.aeinrw.com/posts/golang%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;golang的interface&#34;&gt;golang的&lt;code&gt;interface&lt;/code&gt;&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;
&lt;p&gt;简单地说, golang中地&lt;code&gt;interface&lt;/code&gt;就是一组&lt;strong&gt;方法的组合&lt;/strong&gt;. 任意对象, 只要一点不差的实现了这些方法, 那就相当于实现了这个接口.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang中append()的坑</title>
      <link>https://blog.aeinrw.com/posts/golang%E4%B8%ADappend%E7%9A%84%E5%9D%91/</link>
      <pubDate>Sun, 07 Jun 2020 20:40:39 +0800</pubDate>
      <author>aeinrw@gmail.com (aeinrw)</author>
      <guid>https://blog.aeinrw.com/posts/golang%E4%B8%ADappend%E7%9A%84%E5%9D%91/</guid>
      <description>&lt;h1 id=&#34;slice的结构&#34;&gt;slice的结构&lt;/h1&gt;
&lt;p&gt;slice(切片)是go提供的变长数组, 类似于STL中的vector, 可以随意进行长度扩展.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang中的byte,rune,string</title>
      <link>https://blog.aeinrw.com/posts/golang%E4%B8%AD%E7%9A%84byterunestring/</link>
      <pubDate>Wed, 03 Jun 2020 21:09:05 +0000</pubDate>
      <author>aeinrw@gmail.com (aeinrw)</author>
      <guid>https://blog.aeinrw.com/posts/golang%E4%B8%AD%E7%9A%84byterunestring/</guid>
      <description>&lt;p&gt;在go语言中, 字符串&lt;code&gt;string&lt;/code&gt;被封装. 在学到接口时, &lt;code&gt;io.Writer&lt;/code&gt;和&lt;code&gt;io.Reader&lt;/code&gt;的参数都是&lt;code&gt;[]byte&lt;/code&gt;, 而不是&lt;code&gt;string&lt;/code&gt;. 另外, go也支持utf8, 又引入了&lt;code&gt;rune&lt;/code&gt;. 初学时让我很困扰, 这篇文章理清了三者之间的关系.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
